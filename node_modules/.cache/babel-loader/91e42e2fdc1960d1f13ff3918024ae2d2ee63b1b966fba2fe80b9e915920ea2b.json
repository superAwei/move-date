{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString } from \"vue\";\nconst _hoisted_1 = {\n  class: \"movie-browser\"\n};\nconst _hoisted_2 = {\n  class: \"movie-list\"\n};\nconst _hoisted_3 = [\"src\", \"alt\"];\nconst _hoisted_4 = [\"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[2] || (_cache[2] = _createElementVNode(\"h2\", null, \"Movie Browser\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $setup.searchQuery = $event),\n    onInput: _cache[1] || (_cache[1] = (...args) => $setup.searchMovies && $setup.searchMovies(...args)),\n    placeholder: \"Search movies...\"\n  }, null, 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelText, $setup.searchQuery]]), _createElementVNode(\"div\", _hoisted_2, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.movies, movie => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: movie.id,\n      class: \"movie-item\"\n    }, [_createElementVNode(\"h3\", null, _toDisplayString(movie.title), 1 /* TEXT */), _createElementVNode(\"img\", {\n      src: $setup.getImageUrl(movie.poster_path),\n      alt: movie.title\n    }, null, 8 /* PROPS */, _hoisted_3), _createElementVNode(\"p\", null, _toDisplayString(movie.overview), 1 /* TEXT */), _createElementVNode(\"p\", null, \"Release Date: \" + _toDisplayString(movie.release_date), 1 /* TEXT */), _createElementVNode(\"button\", {\n      onClick: $event => $setup.addToPreferences(movie.genre_ids)\n    }, \"Add to Preferences\", 8 /* PROPS */, _hoisted_4)]);\n  }), 128 /* KEYED_FRAGMENT */))])]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createElementVNode","_cache","$event","$setup","searchQuery","onInput","args","searchMovies","placeholder","_hoisted_2","_Fragment","_renderList","movies","movie","key","id","_toDisplayString","title","src","getImageUrl","poster_path","alt","_hoisted_3","overview","release_date","onClick","addToPreferences","genre_ids","_hoisted_4"],"sources":["/Users/awei/Desktop/movie dating/src/views/MovieBrowser.vue"],"sourcesContent":["<template>\n  <div class=\"movie-browser\">\n    <h2>Movie Browser</h2>\n    <input v-model=\"searchQuery\" @input=\"searchMovies\" placeholder=\"Search movies...\">\n    <div class=\"movie-list\">\n      <div v-for=\"movie in movies\" :key=\"movie.id\" class=\"movie-item\">\n        <h3>{{ movie.title }}</h3>\n        <img :src=\"getImageUrl(movie.poster_path)\" :alt=\"movie.title\">\n        <p>{{ movie.overview }}</p>\n        <p>Release Date: {{ movie.release_date }}</p>\n        <button @click=\"addToPreferences(movie.genre_ids)\">Add to Preferences</button>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { ref } from 'vue'\nimport { auth, db } from '@/firebase'\nimport { doc, updateDoc, arrayUnion } from 'firebase/firestore'\n\nconst API_KEY = '392f3431bc009e57f5dc58f12e4949ee'\nconst API_URL = 'https://api.themoviedb.org/3'\nconst ACCESS_TOKEN = 'eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIzOTJmMzQzMWJjMDA5ZTU3ZjVkYzU4ZjEyZTQ5NDllZSIsIm5iZiI6MTcyODk1Nzg5NC4zMzY4NDMsInN1YiI6IjY2ZGQ0ODcyYzAwN2I0NGZhODlkZDhjNyIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.cEm5M_SCbPFMKfIoduGk9CARGK4ykjvzcU6LCm0E1-E'\n\nexport default {\n  name: 'MovieBrowser',\n  setup() {\n    const movies = ref([])\n    const searchQuery = ref('')\n\n    const searchMovies = async () => {\n      if (searchQuery.value.length > 2) {\n        try {\n          const response = await fetch(`${API_URL}/search/movie?api_key=${API_KEY}&query=${searchQuery.value}`, {\n            headers: {\n              'Authorization': `Bearer ${ACCESS_TOKEN}`,\n              'Content-Type': 'application/json;charset=utf-8'\n            }\n          })\n          const data = await response.json()\n          movies.value = data.results\n        } catch (error) {\n          console.error('Error searching movies:', error)\n        }\n      }\n    }\n\n    const addToPreferences = async (genreIds) => {\n      const user = auth.currentUser\n      if (user) {\n        const userRef = doc(db, 'users', user.uid)\n        await updateDoc(userRef, {\n          moviePreferences: arrayUnion(...genreIds)\n        })\n        alert('Preferences updated!')\n      } else {\n        alert('Please sign in to update preferences')\n      }\n    }\n\n    const getImageUrl = (path) => {\n      return path ? `https://image.tmdb.org/t/p/w500${path}` : 'path/to/placeholder/image.jpg'\n    }\n\n    return {\n      movies,\n      searchQuery,\n      searchMovies,\n      addToPreferences,\n      getImageUrl\n    }\n  }\n}\n</script>\n\n<style scoped>\n.movie-item {\n  margin-bottom: 20px;\n  border: 1px solid #ddd;\n  padding: 10px;\n}\n\n.movie-item img {\n  max-width: 200px;\n  height: auto;\n}\n</style>\n"],"mappings":";;EACOA,KAAK,EAAC;AAAe;;EAGnBA,KAAK,EAAC;AAAY;mBAJ3B;mBAAA;;uBACEC,mBAAA,CAYM,OAZNC,UAYM,G,0BAXJC,mBAAA,CAAsB,YAAlB,eAAa,sB,gBACjBA,mBAAA,CAAkF;IAHtF,uBAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAGoBC,MAAA,CAAAC,WAAW,GAAAF,MAAA;IAAGG,OAAK,EAAAJ,MAAA,QAAAA,MAAA,UAAAK,IAAA,KAAEH,MAAA,CAAAI,YAAA,IAAAJ,MAAA,CAAAI,YAAA,IAAAD,IAAA,CAAY;IAAEE,WAAW,EAAC;iEAA/CL,MAAA,CAAAC,WAAW,E,GAC3BJ,mBAAA,CAQM,OARNS,UAQM,I,kBAPJX,mBAAA,CAMMY,SAAA,QAXZC,WAAA,CAK2BR,MAAA,CAAAS,MAAM,EAAfC,KAAK;yBAAjBf,mBAAA,CAMM;MANwBgB,GAAG,EAAED,KAAK,CAACE,EAAE;MAAElB,KAAK,EAAC;QACjDG,mBAAA,CAA0B,YAAAgB,gBAAA,CAAnBH,KAAK,CAACI,KAAK,kBAClBjB,mBAAA,CAA8D;MAAxDkB,GAAG,EAAEf,MAAA,CAAAgB,WAAW,CAACN,KAAK,CAACO,WAAW;MAAIC,GAAG,EAAER,KAAK,CAACI;4BAP/DK,UAAA,GAQQtB,mBAAA,CAA2B,WAAAgB,gBAAA,CAArBH,KAAK,CAACU,QAAQ,kBACpBvB,mBAAA,CAA6C,WAA1C,gBAAc,GAAAgB,gBAAA,CAAGH,KAAK,CAACW,YAAY,kBACtCxB,mBAAA,CAA8E;MAArEyB,OAAK,EAAAvB,MAAA,IAAEC,MAAA,CAAAuB,gBAAgB,CAACb,KAAK,CAACc,SAAS;OAAG,oBAAkB,iBAV7EC,UAAA,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}