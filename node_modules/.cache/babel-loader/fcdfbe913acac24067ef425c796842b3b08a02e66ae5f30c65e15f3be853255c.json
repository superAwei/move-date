{"ast":null,"code":"import { ref, onMounted } from 'vue';\nimport { auth, db } from '@/firebase';\nimport { doc, updateDoc, arrayUnion } from 'firebase/firestore';\nconst API_KEY = '392f3431bc009e57f5dc58f12e4949ee';\nconst API_URL = 'https://api.themoviedb.org/3';\nexport default {\n  name: 'MovieBrowser',\n  setup() {\n    const movies = ref([]);\n    const searchQuery = ref('');\n    const searchMovies = async () => {\n      if (searchQuery.value.length > 0) {\n        try {\n          const response = await fetch(`${API_URL}/search/movie?api_key=${API_KEY}&query=${searchQuery.value}&language=zh-TW`);\n          const data = await response.json();\n          movies.value = data.results;\n        } catch (error) {\n          console.error('Error searching movies:', error);\n        }\n      } else {\n        movies.value = [];\n      }\n    };\n    const addToPreferences = async genreIds => {\n      const user = auth.currentUser;\n      if (user) {\n        const userRef = doc(db, 'users', user.uid);\n        await updateDoc(userRef, {\n          moviePreferences: arrayUnion(...genreIds)\n        });\n        alert('偏好已更新！');\n      } else {\n        alert('請先登錄以更新偏好');\n      }\n    };\n    const getImageUrl = path => {\n      return path ? `https://image.tmdb.org/t/p/w500${path}` : 'path/to/placeholder/image.jpg';\n    };\n    onMounted(() => {\n      searchMovies();\n    });\n    return {\n      movies,\n      searchQuery,\n      searchMovies,\n      addToPreferences,\n      getImageUrl\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","auth","db","doc","updateDoc","arrayUnion","API_KEY","API_URL","name","setup","movies","searchQuery","searchMovies","value","length","response","fetch","data","json","results","error","console","addToPreferences","genreIds","user","currentUser","userRef","uid","moviePreferences","alert","getImageUrl","path"],"sources":["/Users/awei/Desktop/movie dating/src/views/MovieBrowser.vue"],"sourcesContent":["<template>\n  <div class=\"movie-browser container\">\n    <h2>Movie Browser</h2>\n    <input \n      v-model=\"searchQuery\" \n      @input=\"searchMovies\" \n      type=\"text\" \n      placeholder=\"搜索電影...\"\n    >\n    <div class=\"movie-list\">\n      <div v-for=\"movie in movies\" :key=\"movie.id\" class=\"movie-item\">\n        <img :src=\"getImageUrl(movie.poster_path)\" :alt=\"movie.title\">\n        <h3>{{ movie.title }}</h3>\n        <p>{{ movie.release_date }}</p>\n        <button @click=\"addToPreferences(movie.genre_ids)\">添加到偏好</button>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { ref, onMounted } from 'vue'\nimport { auth, db } from '@/firebase'\nimport { doc, updateDoc, arrayUnion } from 'firebase/firestore'\n\nconst API_KEY = '392f3431bc009e57f5dc58f12e4949ee'\nconst API_URL = 'https://api.themoviedb.org/3'\n\nexport default {\n  name: 'MovieBrowser',\n  setup() {\n    const movies = ref([])\n    const searchQuery = ref('')\n\n    const searchMovies = async () => {\n      if (searchQuery.value.length > 0) {\n        try {\n          const response = await fetch(`${API_URL}/search/movie?api_key=${API_KEY}&query=${searchQuery.value}&language=zh-TW`)\n          const data = await response.json()\n          movies.value = data.results\n        } catch (error) {\n          console.error('Error searching movies:', error)\n        }\n      } else {\n        movies.value = []\n      }\n    }\n\n    const addToPreferences = async (genreIds) => {\n      const user = auth.currentUser\n      if (user) {\n        const userRef = doc(db, 'users', user.uid)\n        await updateDoc(userRef, {\n          moviePreferences: arrayUnion(...genreIds)\n        })\n        alert('偏好已更新！')\n      } else {\n        alert('請先登錄以更新偏好')\n      }\n    }\n\n    const getImageUrl = (path) => {\n      return path ? `https://image.tmdb.org/t/p/w500${path}` : 'path/to/placeholder/image.jpg'\n    }\n\n    onMounted(() => {\n      searchMovies()\n    })\n\n    return {\n      movies,\n      searchQuery,\n      searchMovies,\n      addToPreferences,\n      getImageUrl\n    }\n  }\n}\n</script>\n\n<style scoped>\n.movie-browser {\n  text-align: center;\n}\n\n.movie-list {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n  gap: 20px;\n  margin-top: 20px;\n}\n\n.movie-item {\n  background-color: #ffffff;\n  border-radius: 8px;\n  padding: 15px;\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n}\n\n.movie-item img {\n  width: 100%;\n  height: auto;\n  border-radius: 4px;\n  margin-bottom: 10px;\n}\n\n.movie-item h3 {\n  font-size: 18px;\n  margin-bottom: 5px;\n}\n\n.movie-item p {\n  font-size: 14px;\n  color: #666;\n  margin-bottom: 10px;\n}\n</style>\n"],"mappings":"AAqBA,SAASA,GAAG,EAAEC,SAAQ,QAAS,KAAI;AACnC,SAASC,IAAI,EAAEC,EAAC,QAAS,YAAW;AACpC,SAASC,GAAG,EAAEC,SAAS,EAAEC,UAAS,QAAS,oBAAmB;AAE9D,MAAMC,OAAM,GAAI,kCAAiC;AACjD,MAAMC,OAAM,GAAI,8BAA6B;AAE7C,eAAe;EACbC,IAAI,EAAE,cAAc;EACpBC,KAAKA,CAAA,EAAG;IACN,MAAMC,MAAK,GAAIX,GAAG,CAAC,EAAE;IACrB,MAAMY,WAAU,GAAIZ,GAAG,CAAC,EAAE;IAE1B,MAAMa,YAAW,GAAI,MAAAA,CAAA,KAAY;MAC/B,IAAID,WAAW,CAACE,KAAK,CAACC,MAAK,GAAI,CAAC,EAAE;QAChC,IAAI;UACF,MAAMC,QAAO,GAAI,MAAMC,KAAK,CAAC,GAAGT,OAAO,yBAAyBD,OAAO,UAAUK,WAAW,CAACE,KAAK,iBAAiB;UACnH,MAAMI,IAAG,GAAI,MAAMF,QAAQ,CAACG,IAAI,CAAC;UACjCR,MAAM,CAACG,KAAI,GAAII,IAAI,CAACE,OAAM;QAC5B,EAAE,OAAOC,KAAK,EAAE;UACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK;QAChD;MACF,OAAO;QACLV,MAAM,CAACG,KAAI,GAAI,EAAC;MAClB;IACF;IAEA,MAAMS,gBAAe,GAAI,MAAOC,QAAQ,IAAK;MAC3C,MAAMC,IAAG,GAAIvB,IAAI,CAACwB,WAAU;MAC5B,IAAID,IAAI,EAAE;QACR,MAAME,OAAM,GAAIvB,GAAG,CAACD,EAAE,EAAE,OAAO,EAAEsB,IAAI,CAACG,GAAG;QACzC,MAAMvB,SAAS,CAACsB,OAAO,EAAE;UACvBE,gBAAgB,EAAEvB,UAAU,CAAC,GAAGkB,QAAQ;QAC1C,CAAC;QACDM,KAAK,CAAC,QAAQ;MAChB,OAAO;QACLA,KAAK,CAAC,WAAW;MACnB;IACF;IAEA,MAAMC,WAAU,GAAKC,IAAI,IAAK;MAC5B,OAAOA,IAAG,GAAI,kCAAkCA,IAAI,EAAC,GAAI,+BAA8B;IACzF;IAEA/B,SAAS,CAAC,MAAM;MACdY,YAAY,CAAC;IACf,CAAC;IAED,OAAO;MACLF,MAAM;MACNC,WAAW;MACXC,YAAY;MACZU,gBAAgB;MAChBQ;IACF;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}